"""Initial migration with league and tournament schema

Revision ID: 22b4441692fa
Revises: 
Create Date: 2025-08-14 16:47:53.164654

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '22b4441692fa'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('badges',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('icon_url', sa.String(length=255), nullable=True),
    sa.Column('rarity', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_badges_id'), 'badges', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('discord_id', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_discord_id'), 'users', ['discord_id'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_table('sponsor_info')
    op.drop_table('kv_store_10f5458b')
    op.drop_table('regions')
    op.drop_table('profiles')
    op.drop_index(op.f('idx_update_race_race_id'), table_name='update_race')
    op.drop_table('update_race')
    op.drop_table('player_salary_tiers')
    op.drop_index(op.f('idx_user_roles_user_id'), table_name='user_roles')
    op.drop_table('user_roles')
    op.drop_table('salary_tiers')
    op.drop_table('role_permissions')
    op.drop_index(op.f('notifications_created_at_idx'), table_name='notifications')
    op.drop_index(op.f('notifications_user_id_idx'), table_name='notifications')
    op.drop_table('notifications')
    op.alter_column('awards_race', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('awards_race', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('awards_race', 'player_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('awards_race', 'rank',
               existing_type=sa.SMALLINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('awards_race', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('awards_race', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identifier',
               existing_nullable=True)
    op.alter_column('awards_race', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Identifier',
               existing_nullable=True)
    op.create_index(op.f('ix_awards_race_id'), 'awards_race', ['id'], unique=False)
    op.drop_constraint(op.f('awards_race_player_id_fkey'), 'awards_race', type_='foreignkey')
    op.drop_constraint(op.f('awards_race_tournament_id_fkey'), 'awards_race', type_='foreignkey')
    op.drop_constraint(op.f('awards_race_league_id_fkey'), 'awards_race', type_='foreignkey')
    op.create_foreign_key(None, 'awards_race', 'tournaments', ['tournament_id'], ['id'])
    op.create_foreign_key(None, 'awards_race', 'players', ['player_id'], ['id'])
    op.create_foreign_key(None, 'awards_race', 'leagues_info', ['league_id'], ['id'])
    op.alter_column('draft_pool', 'player_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('draft_pool', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'available'::text"))
    op.alter_column('draft_pool', 'season',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('draft_pool', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identifier',
               existing_nullable=True)
    op.alter_column('draft_pool', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournaments Identifier',
               existing_nullable=True)
    op.drop_constraint(op.f('draft_pool_tournament_id_fkey'), 'draft_pool', type_='foreignkey')
    op.drop_constraint(op.f('draft_pool_player_id_fkey'), 'draft_pool', type_='foreignkey')
    op.drop_constraint(op.f('draft_pool_season_fkey'), 'draft_pool', type_='foreignkey')
    op.drop_constraint(op.f('draft_pool_league_id_fkey'), 'draft_pool', type_='foreignkey')
    op.create_foreign_key(None, 'draft_pool', 'leagues_info', ['league_id'], ['id'])
    op.create_foreign_key(None, 'draft_pool', 'tournaments', ['tournament_id'], ['id'])
    op.create_foreign_key(None, 'draft_pool', 'players', ['player_id'], ['id'])
    op.alter_column('tournament_groups_members', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('tournament_groups_members', 'group_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('tournament_groups_members', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_constraint(op.f('tournament_groups_members_group_id_team_id_key'), 'tournament_groups_members', type_='unique')
    op.drop_index(op.f('idx_tournament_groups_members_group_id'), table_name='tournament_groups_members')
    op.drop_index(op.f('idx_tournament_groups_members_team_id'), table_name='tournament_groups_members')
    op.create_index(op.f('ix_tournament_groups_members_id'), 'tournament_groups_members', ['id'], unique=False)
    op.alter_column('tournament_groupss', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('tournament_groupss', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('tournament_groupss', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'active'::text"))
    op.alter_column('tournament_groupss', 'advancement_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Number of teams that advance from this group',
               existing_nullable=True,
               existing_server_default=sa.text('2'))
    op.alter_column('tournament_groupss', 'sort_order',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Order in which groups are displayed',
               existing_nullable=True)
    op.alter_column('tournament_groupss', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('tournament_groupss', 'league_season_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.create_index(op.f('ix_tournament_groupss_id'), 'tournament_groupss', ['id'], unique=False)
    op.drop_constraint(op.f('tournament_groupss_league_season_id_fkey'), 'tournament_groupss', type_='foreignkey')
    op.drop_constraint(op.f('tournament_groupss_tournament_id_fkey'), 'tournament_groupss', type_='foreignkey')
    op.create_foreign_key(None, 'tournament_groupss', 'league_seasons', ['league_season_id'], ['id'])
    op.create_foreign_key(None, 'tournament_groupss', 'tournaments', ['tournament_id'], ['id'])
    op.alter_column('event_results', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('event_results', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('event_results', 'awarded_at',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_DATE'))
    op.alter_column('event_results', 'prize_amount',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Cash Prize Amount',
               existing_nullable=True)
    op.alter_column('event_results', 'winner_banner_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('event_results', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identifier',
               existing_nullable=True)
    op.alter_column('event_results', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Identifier',
               existing_nullable=True)
    op.drop_constraint(op.f('event_results_id_key'), 'event_results', type_='unique')
    op.drop_index(op.f('event_results_team_placement_idx'), table_name='event_results')
    op.create_index(op.f('ix_event_results_id'), 'event_results', ['id'], unique=False)
    op.drop_constraint(op.f('event_results_tournament_id_fkey'), 'event_results', type_='foreignkey')
    op.drop_constraint(op.f('event_results_league_id_fkey'), 'event_results', type_='foreignkey')
    op.create_foreign_key(None, 'event_results', 'leagues_info', ['league_id'], ['id'])
    op.create_foreign_key(None, 'event_results', 'tournaments', ['tournament_id'], ['id'])
    op.alter_column('group_matches', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('group_matches', 'group_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('group_matches', 'match_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_constraint(op.f('group_matches_group_id_match_id_key'), 'group_matches', type_='unique')
    op.drop_index(op.f('idx_group_matches_group_id'), table_name='group_matches')
    op.drop_index(op.f('idx_group_matches_match_id'), table_name='group_matches')
    op.create_index(op.f('ix_group_matches_id'), 'group_matches', ['id'], unique=False)
    op.alter_column('group_standings', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('group_standings', 'group_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('group_standings', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_constraint(op.f('group_standings_group_id_team_id_key'), 'group_standings', type_='unique')
    op.drop_index(op.f('idx_group_standings_group_id'), table_name='group_standings')
    op.drop_index(op.f('idx_group_standings_team_id'), table_name='group_standings')
    op.create_index(op.f('ix_group_standings_id'), 'group_standings', ['id'], unique=False)
    op.alter_column('league_seasons', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('league_seasons', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('league_seasons', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('league_seasons', 'year',
               existing_type=postgresql.ENUM('2K16', '2K17', '2K18', '2K19', '2K20', '2K21', '2K22', '2K23', '2K24', '2K25', '2K26', name='game_year'),
               comment=None,
               existing_comment='game year',
               existing_nullable=True)
    op.alter_column('league_seasons', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identifier',
               existing_nullable=True)
    op.drop_constraint(op.f('unique_league_season'), 'league_seasons', type_='unique')
    op.create_index(op.f('ix_league_seasons_id'), 'league_seasons', ['id'], unique=False)
    op.drop_constraint(op.f('league_seasons_league_name_fkey'), 'league_seasons', type_='foreignkey')
    op.drop_constraint(op.f('league_seasons_league_id_fkey'), 'league_seasons', type_='foreignkey')
    op.create_foreign_key(None, 'league_seasons', 'leagues_info', ['league_id'], ['id'])
    op.drop_table_comment(
        'league_seasons',
        existing_comment='Tracks sports league seasons',
        schema=None
    )
    op.alter_column('leagues_info', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('leagues_info', 'league',
               existing_type=postgresql.ENUM('Unified Pro Am Association', 'UPA College', 'WR', 'MPBA', 'Rising Stars', 'Staten Island Basketball Association', 'Hall Of Fame League', 'Dunk League', 'Road to 25K', name='leagues'),
               nullable=False)
    op.alter_column('leagues_info', 'lg_logo_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('leagues_info', 'lg_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('leagues_info', 'lg_discord',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('leagues_info', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('leagues_info', 'twitter_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('leagues_info', 'twitch_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               comment=None,
               existing_comment='Twitch',
               existing_nullable=True)
    op.drop_constraint(op.f('leagues_info_lg_logo_url_key'), 'leagues_info', type_='unique')
    op.drop_constraint(op.f('leagues_info_twitter_id_key'), 'leagues_info', type_='unique')
    op.create_index(op.f('ix_leagues_info_id'), 'leagues_info', ['id'], unique=False)
    op.drop_constraint(op.f('leagues_info_sponsor_info_fkey'), 'leagues_info', type_='foreignkey')
    op.drop_table_comment(
        'leagues_info',
        existing_comment='League Information',
        schema=None
    )
    op.alter_column('match_mvp', 'match_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('match_mvp', 'player_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_constraint(op.f('match_mvp_match_id_fkey'), 'match_mvp', type_='foreignkey')
    op.create_foreign_key(None, 'match_mvp', 'matches', ['match_id'], ['id'])
    op.alter_column('match_points', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('match_points', 'match_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('match_points', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('match_points', 'group_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('match_points', 'point_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index(op.f('idx_match_points_group_id'), table_name='match_points')
    op.drop_index(op.f('idx_match_points_match_id'), table_name='match_points')
    op.drop_index(op.f('idx_match_points_team_id'), table_name='match_points')
    op.create_index(op.f('ix_match_points_id'), 'match_points', ['id'], unique=False)
    op.alter_column('match_submissions', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('match_submissions', 'match_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'team_a_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'team_a_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'team_b_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'team_b_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'review_status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'reviewed_by',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('match_submissions', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'payload',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Identifier',
               existing_nullable=True)
    op.create_index(op.f('ix_match_submissions_id'), 'match_submissions', ['id'], unique=False)
    op.drop_constraint(op.f('match_submissions_league_id_fkey'), 'match_submissions', type_='foreignkey')
    op.drop_constraint(op.f('match_submissions_team_b_name_fkey'), 'match_submissions', type_='foreignkey')
    op.drop_constraint(op.f('match_submissions_match_id_fkey'), 'match_submissions', type_='foreignkey')
    op.drop_constraint(op.f('match_submissions_tournament_id_fkey'), 'match_submissions', type_='foreignkey')
    op.drop_constraint(op.f('match_submissions_team_a_name_fkey'), 'match_submissions', type_='foreignkey')
    op.create_foreign_key(None, 'match_submissions', 'leagues_info', ['league_id'], ['id'])
    op.create_foreign_key(None, 'match_submissions', 'tournaments', ['tournament_id'], ['id'])
    op.create_foreign_key(None, 'match_submissions', 'matches', ['match_id'], ['id'])
    op.drop_table_comment(
        'match_submissions',
        existing_comment='match results for review',
        schema=None
    )
    op.add_column('matches', sa.Column('team_b_name', sa.String(), nullable=True))
    op.add_column('matches', sa.Column('winner_name', sa.String(), nullable=True))
    op.alter_column('matches', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('matches', 'team_a_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('matches', 'team_b_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('matches', 'winner_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('matches', 'boxscore_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               comment=None,
               existing_comment='boxscore from Storage Bucket',
               existing_nullable=True)
    op.alter_column('matches', 'team_a_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('matches', 'game_number',
               existing_type=sa.SMALLINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('matches', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identifier',
               existing_nullable=True)
    op.alter_column('matches', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Identifier',
               existing_nullable=True)
    op.alter_column('matches', 'league_season',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Season',
               existing_nullable=True)
    op.drop_index(op.f('idx_matches_team_a_id'), table_name='matches')
    op.drop_index(op.f('idx_matches_team_a_name'), table_name='matches')
    op.drop_index(op.f('idx_matches_team_b_id'), table_name='matches')
    op.drop_index(op.f('idx_matches_winner_id'), table_name='matches')
    op.drop_constraint(op.f('matches_id_key'), 'matches', type_='unique')
    op.create_index(op.f('ix_matches_id'), 'matches', ['id'], unique=False)
    op.drop_constraint(op.f('matches_league_season_fkey'), 'matches', type_='foreignkey')
    op.drop_constraint(op.f('matches_team_a_name_fkey'), 'matches', type_='foreignkey')
    op.drop_constraint(op.f('matches_tournament_id_fkey'), 'matches', type_='foreignkey')
    op.drop_constraint(op.f('matches_league_id_fkey'), 'matches', type_='foreignkey')
    op.create_foreign_key(None, 'matches', 'league_seasons', ['league_season'], ['id'])
    op.create_foreign_key(None, 'matches', 'tournaments', ['tournament_id'], ['id'])
    op.create_foreign_key(None, 'matches', 'leagues_info', ['league_id'], ['id'])
    op.alter_column('past_champions', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('past_champions', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('past_champions', 'team_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('past_champions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('past_champions', 'champion_logo',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               comment=None,
               existing_comment='Champion Logo URL',
               existing_nullable=True)
    op.alter_column('past_champions', 'lg_logo',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Logo URL',
               existing_nullable=True)
    op.alter_column('past_champions', 'is_tournament',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('past_champions', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('past_champions', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('past_champions', 'tournament_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index(op.f('past_champions_league_idx'), table_name='past_champions')
    op.drop_index(op.f('past_champions_team_year_idx'), table_name='past_champions')
    op.create_index(op.f('ix_past_champions_id'), 'past_champions', ['id'], unique=False)
    op.drop_constraint(op.f('past_champions_team_name_fkey'), 'past_champions', type_='foreignkey')
    op.drop_constraint(op.f('past_champions_lg_logo_fkey'), 'past_champions', type_='foreignkey')
    op.drop_constraint(op.f('past_champions_champion_logo_fkey'), 'past_champions', type_='foreignkey')
    op.drop_constraint(op.f('past_champions_league_id_fkey'), 'past_champions', type_='foreignkey')
    op.drop_constraint(op.f('past_champions_tournament_id_fkey'), 'past_champions', type_='foreignkey')
    op.create_foreign_key(None, 'past_champions', 'tournaments', ['tournament_id'], ['id'])
    op.create_foreign_key(None, 'past_champions', 'leagues_info', ['league_id'], ['id'])
    op.alter_column('player_badges', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('player_badges', 'player_wallet',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('player_badges', 'badge_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('player_badges', 'tx_hash',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('player_badges', 'ipfs_uri',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('player_badges', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('player_badges', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identifier',
               existing_nullable=True)
    op.alter_column('player_badges', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Identifier',
               existing_nullable=True)
    op.drop_index(op.f('player_badges_player_wallet_idx'), table_name='player_badges')
    op.create_index(op.f('ix_player_badges_id'), 'player_badges', ['id'], unique=False)
    op.drop_constraint(op.f('player_badges_tournament_id_fkey'), 'player_badges', type_='foreignkey')
    op.drop_constraint(op.f('player_badges_league_id_fkey'), 'player_badges', type_='foreignkey')
    op.create_foreign_key(None, 'player_badges', 'leagues_info', ['league_id'], ['id'])
    op.create_foreign_key(None, 'player_badges', 'tournaments', ['tournament_id'], ['id'])
    op.alter_column('player_rp_transactions', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('player_rp_transactions', 'player_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('player_rp_transactions', 'match_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('player_rp_transactions', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('player_rp_transactions', 'type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('player_rp_transactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('player_rp_transactions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('player_rp_transactions', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identifier',
               existing_nullable=True)
    op.alter_column('player_rp_transactions', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Identifier',
               existing_nullable=True)
    op.drop_index(op.f('player_rp_transactions_match_id_idx'), table_name='player_rp_transactions')
    op.drop_index(op.f('player_rp_transactions_player_id_idx'), table_name='player_rp_transactions')
    op.create_index(op.f('ix_player_rp_transactions_id'), 'player_rp_transactions', ['id'], unique=False)
    op.drop_constraint(op.f('player_rp_transactions_league_id_fkey'), 'player_rp_transactions', type_='foreignkey')
    op.drop_constraint(op.f('player_rp_transactions_tournament_id_fkey'), 'player_rp_transactions', type_='foreignkey')
    op.create_foreign_key(None, 'player_rp_transactions', 'tournaments', ['tournament_id'], ['id'])
    op.create_foreign_key(None, 'player_rp_transactions', 'leagues_info', ['league_id'], ['id'])
    op.alter_column('player_stats', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('player_stats', 'player_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('player_stats', 'match_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('player_stats', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('player_stats', 'fgm',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Field Goals Made',
               existing_nullable=True,
               existing_server_default=sa.text("'0'::smallint"))
    op.alter_column('player_stats', 'fga',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Field Goals Attempted',
               existing_nullable=True)
    op.alter_column('player_stats', 'player_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('idx_player_stats_match_id'), table_name='player_stats')
    op.drop_index(op.f('idx_player_stats_player_id'), table_name='player_stats')
    op.drop_index(op.f('idx_player_stats_player_name'), table_name='player_stats')
    op.drop_index(op.f('idx_player_stats_team_id'), table_name='player_stats')
    op.drop_index(op.f('idx_stats_player'), table_name='player_stats')
    op.drop_index(op.f('idx_stats_team'), table_name='player_stats')
    op.drop_constraint(op.f('player_stats_id_key'), 'player_stats', type_='unique')
    op.create_index(op.f('ix_player_stats_id'), 'player_stats', ['id'], unique=False)
    op.drop_constraint(op.f('player_stats_player_name_fkey'), 'player_stats', type_='foreignkey')
    op.alter_column('players', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('players', 'gamertag',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('players', 'current_team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('players', 'discord_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               comment=None,
               existing_comment='Discord Handle',
               existing_nullable=True)
    op.alter_column('players', 'twitter_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               comment=None,
               existing_comment='Twitter Handle',
               existing_nullable=True)
    op.alter_column('players', 'alternate_gamertag',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               comment=None,
               existing_comment='Old or Alternate Gamertag',
               existing_nullable=True)
    op.drop_index(op.f('idx_players_current_team_id'), table_name='players')
    op.drop_index(op.f('idx_players_position'), table_name='players')
    op.create_index(op.f('ix_players_id'), 'players', ['id'], unique=False)
    op.drop_constraint(op.f('players_current_team_id_fkey'), 'players', type_='foreignkey')
    op.create_foreign_key(None, 'players', 'teams', ['current_team_id'], ['id'])
    op.alter_column('ranking_points', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('ranking_points', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('ranking_points', 'source',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('ranking_points', 'awarded_at',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_DATE'))
    op.alter_column('ranking_points', 'expires_at',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('ranking_points', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identifier',
               existing_nullable=True)
    op.alter_column('ranking_points', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Identifier',
               existing_nullable=True)
    op.drop_index(op.f('idx_rp_expire'), table_name='ranking_points')
    op.create_index(op.f('ix_ranking_points_id'), 'ranking_points', ['id'], unique=False)
    op.drop_constraint(op.f('ranking_points_league_id_fkey'), 'ranking_points', type_='foreignkey')
    op.drop_constraint(op.f('ranking_points_tournament_id_fkey'), 'ranking_points', type_='foreignkey')
    op.create_foreign_key(None, 'ranking_points', 'tournaments', ['tournament_id'], ['id'])
    op.create_foreign_key(None, 'ranking_points', 'leagues_info', ['league_id'], ['id'])
    op.alter_column('rp_transactions', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('rp_transactions', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('rp_transactions', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('rp_transactions', 'type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('rp_transactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('rp_transactions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('rp_transactions', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identifier',
               existing_nullable=True)
    op.alter_column('rp_transactions', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Identifier',
               existing_nullable=True)
    op.create_index(op.f('ix_rp_transactions_id'), 'rp_transactions', ['id'], unique=False)
    op.drop_constraint(op.f('rp_transactions_team_id_fkey'), 'rp_transactions', type_='foreignkey')
    op.drop_constraint(op.f('rp_transactions_league_id_fkey'), 'rp_transactions', type_='foreignkey')
    op.drop_constraint(op.f('rp_transactions_tournament_id_fkey'), 'rp_transactions', type_='foreignkey')
    op.create_foreign_key(None, 'rp_transactions', 'tournaments', ['tournament_id'], ['id'])
    op.create_foreign_key(None, 'rp_transactions', 'teams', ['team_id'], ['id'])
    op.create_foreign_key(None, 'rp_transactions', 'leagues_info', ['league_id'], ['id'])
    op.alter_column('team_match_stats', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('team_match_stats', 'match_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('team_match_stats', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_constraint(op.f('team_match_stats_match_id_team_id_key'), 'team_match_stats', type_='unique')
    op.create_index(op.f('ix_team_match_stats_id'), 'team_match_stats', ['id'], unique=False)
    op.drop_constraint(op.f('team_match_stats_match_id_fkey'), 'team_match_stats', type_='foreignkey')
    op.drop_constraint(op.f('team_match_stats_team_id_fkey'), 'team_match_stats', type_='foreignkey')
    op.create_foreign_key(None, 'team_match_stats', 'matches', ['match_id'], ['id'])
    op.create_foreign_key(None, 'team_match_stats', 'teams', ['team_id'], ['id'])
    op.alter_column('team_rosters', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('team_rosters', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('team_rosters', 'player_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('team_rosters', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identification',
               existing_nullable=True)
    op.alter_column('team_rosters', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Identification',
               existing_nullable=True)
    op.drop_index(op.f('idx_team_rosters_player_id'), table_name='team_rosters')
    op.drop_index(op.f('idx_team_rosters_team_id'), table_name='team_rosters')
    op.create_index(op.f('ix_team_rosters_id'), 'team_rosters', ['id'], unique=False)
    op.drop_constraint(op.f('team_rosters_player_id_fkey'), 'team_rosters', type_='foreignkey')
    op.drop_constraint(op.f('team_rosters_team_id_fkey'), 'team_rosters', type_='foreignkey')
    op.drop_constraint(op.f('team_rosters_league_id_fkey'), 'team_rosters', type_='foreignkey')
    op.drop_constraint(op.f('team_rosters_tournament_id_fkey'), 'team_rosters', type_='foreignkey')
    op.create_foreign_key(None, 'team_rosters', 'leagues_info', ['league_id'], ['id'])
    op.create_foreign_key(None, 'team_rosters', 'players', ['player_id'], ['id'])
    op.create_foreign_key(None, 'team_rosters', 'tournaments', ['tournament_id'], ['id'])
    op.create_foreign_key(None, 'team_rosters', 'teams', ['team_id'], ['id'])
    op.alter_column('teams', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('teams', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('teams', 'logo_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('teams', 'leaderboard_tier',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint(op.f('teams_id_key'), 'teams', type_='unique')
    op.create_index(op.f('ix_teams_id'), 'teams', ['id'], unique=False)
    op.alter_column('teams_pot_tracker', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('teams_pot_tracker', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('teams_pot_tracker', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('teams_pot_tracker', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identifier',
               existing_nullable=True)
    op.alter_column('teams_pot_tracker', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Identifer',
               existing_nullable=True)
    op.create_index(op.f('ix_teams_pot_tracker_id'), 'teams_pot_tracker', ['id'], unique=False)
    op.drop_constraint(op.f('teams_pot_tracker_team_id_fkey'), 'teams_pot_tracker', type_='foreignkey')
    op.drop_constraint(op.f('teams_pot_tracker_tournament_id_fkey'), 'teams_pot_tracker', type_='foreignkey')
    op.drop_constraint(op.f('teams_pot_tracker_league_id_fkey'), 'teams_pot_tracker', type_='foreignkey')
    op.create_foreign_key(None, 'teams_pot_tracker', 'teams', ['team_id'], ['id'])
    op.create_foreign_key(None, 'teams_pot_tracker', 'leagues_info', ['league_id'], ['id'])
    op.create_foreign_key(None, 'teams_pot_tracker', 'tournaments', ['tournament_id'], ['id'])
    op.drop_table_comment(
        'teams_pot_tracker',
        existing_comment='Team Earnings',
        schema=None
    )
    op.alter_column('tournaments', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('tournaments', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('tournaments', 'organizer_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('tournaments', 'sponsor',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('tournaments', 'start_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('tournaments', 'end_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('tournaments', 'runner_up',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('tournaments', 'place',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('tournaments', 'organizer_logo_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('tournaments', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('tournaments', 'banner_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('tournaments', 'rules_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('tournaments', 'max_rp',
               existing_type=sa.SMALLINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('tournaments', 'champion',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Champion',
               existing_nullable=True)
    op.alter_column('tournaments', 'sponsor_logo',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               comment=None,
               existing_comment='Sponsor Logo',
               existing_nullable=True)
    op.create_index(op.f('ix_tournaments_id'), 'tournaments', ['id'], unique=False)
    op.drop_constraint(op.f('tournaments_sponsor_logo_fkey'), 'tournaments', type_='foreignkey')
    op.drop_constraint(op.f('tournaments_champion_fkey'), 'tournaments', type_='foreignkey')
    op.drop_constraint(op.f('tournaments_sponsor_fkey'), 'tournaments', type_='foreignkey')
    op.drop_constraint(op.f('tournaments_organizer_logo_url_fkey'), 'tournaments', type_='foreignkey')
    op.create_foreign_key(None, 'tournaments', 'teams', ['champion'], ['id'])
    op.add_column('upcoming_matches', sa.Column('venue', sa.String(), nullable=True))
    op.add_column('upcoming_matches', sa.Column('team_a_logo', sa.String(), nullable=True))
    op.add_column('upcoming_matches', sa.Column('team_b_logo', sa.String(), nullable=True))
    op.alter_column('upcoming_matches', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('upcoming_matches', 'team_a_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('upcoming_matches', 'team_b_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('upcoming_matches', 'stream_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('upcoming_matches', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'scheduled'::text"))
    op.alter_column('upcoming_matches', 'group_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('upcoming_matches', 'league_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='League Identifier',
               existing_nullable=True)
    op.alter_column('upcoming_matches', 'tournament_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               comment=None,
               existing_comment='Tournament Identifier',
               existing_nullable=True)
    op.drop_index(op.f('idx_upcoming_matches_group_id'), table_name='upcoming_matches')
    op.drop_index(op.f('idx_upcoming_matches_scheduled_at'), table_name='upcoming_matches')
    op.drop_index(op.f('idx_upcoming_matches_team_a_id'), table_name='upcoming_matches')
    op.drop_index(op.f('idx_upcoming_matches_team_b_id'), table_name='upcoming_matches')
    op.create_index(op.f('ix_upcoming_matches_id'), 'upcoming_matches', ['id'], unique=False)
    op.drop_constraint(op.f('upcoming_matches_tournament_id_fkey'), 'upcoming_matches', type_='foreignkey')
    op.drop_constraint(op.f('upcoming_matches_league_id_fkey'), 'upcoming_matches', type_='foreignkey')
    op.create_foreign_key(None, 'upcoming_matches', 'tournaments', ['tournament_id'], ['id'])
    op.create_foreign_key(None, 'upcoming_matches', 'leagues_info', ['league_id'], ['id'])
    op.drop_table_comment(
        'upcoming_matches',
        existing_comment='Stores information about upcoming matches including schedule and location',
        schema=None
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        'upcoming_matches',
        'Stores information about upcoming matches including schedule and location',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'upcoming_matches', type_='foreignkey')
    op.drop_constraint(None, 'upcoming_matches', type_='foreignkey')
    op.create_foreign_key(op.f('upcoming_matches_league_id_fkey'), 'upcoming_matches', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('upcoming_matches_tournament_id_fkey'), 'upcoming_matches', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_upcoming_matches_id'), table_name='upcoming_matches')
    op.create_index(op.f('idx_upcoming_matches_team_b_id'), 'upcoming_matches', ['team_b_id'], unique=False)
    op.create_index(op.f('idx_upcoming_matches_team_a_id'), 'upcoming_matches', ['team_a_id'], unique=False)
    op.create_index(op.f('idx_upcoming_matches_scheduled_at'), 'upcoming_matches', ['scheduled_at'], unique=False)
    op.create_index(op.f('idx_upcoming_matches_group_id'), 'upcoming_matches', ['group_id'], unique=False)
    op.alter_column('upcoming_matches', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Identifier',
               existing_nullable=True)
    op.alter_column('upcoming_matches', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identifier',
               existing_nullable=True)
    op.alter_column('upcoming_matches', 'group_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('upcoming_matches', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'scheduled'::text"))
    op.alter_column('upcoming_matches', 'stream_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('upcoming_matches', 'team_b_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('upcoming_matches', 'team_a_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('upcoming_matches', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_column('upcoming_matches', 'team_b_logo')
    op.drop_column('upcoming_matches', 'team_a_logo')
    op.drop_column('upcoming_matches', 'venue')
    op.drop_constraint(None, 'tournaments', type_='foreignkey')
    op.create_foreign_key(op.f('tournaments_organizer_logo_url_fkey'), 'tournaments', 'leagues_info', ['organizer_logo_url'], ['lg_logo_url'])
    op.create_foreign_key(op.f('tournaments_sponsor_fkey'), 'tournaments', 'sponsor_info', ['sponsor'], ['sponsor_name'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('tournaments_champion_fkey'), 'tournaments', 'teams', ['champion'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('tournaments_sponsor_logo_fkey'), 'tournaments', 'sponsor_info', ['sponsor_logo'], ['sponsor_logo'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_tournaments_id'), table_name='tournaments')
    op.alter_column('tournaments', 'sponsor_logo',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               comment='Sponsor Logo',
               existing_nullable=True)
    op.alter_column('tournaments', 'champion',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Champion',
               existing_nullable=True)
    op.alter_column('tournaments', 'max_rp',
               existing_type=sa.Integer(),
               type_=sa.SMALLINT(),
               existing_nullable=True)
    op.alter_column('tournaments', 'rules_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('tournaments', 'banner_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('tournaments', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('tournaments', 'organizer_logo_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('tournaments', 'place',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('tournaments', 'runner_up',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('tournaments', 'end_date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True)
    op.alter_column('tournaments', 'start_date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True)
    op.alter_column('tournaments', 'sponsor',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('tournaments', 'organizer_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('tournaments', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('tournaments', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.create_table_comment(
        'teams_pot_tracker',
        'Team Earnings',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'teams_pot_tracker', type_='foreignkey')
    op.drop_constraint(None, 'teams_pot_tracker', type_='foreignkey')
    op.drop_constraint(None, 'teams_pot_tracker', type_='foreignkey')
    op.create_foreign_key(op.f('teams_pot_tracker_league_id_fkey'), 'teams_pot_tracker', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('teams_pot_tracker_tournament_id_fkey'), 'teams_pot_tracker', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('teams_pot_tracker_team_id_fkey'), 'teams_pot_tracker', 'teams', ['team_id'], ['id'], onupdate='CASCADE')
    op.drop_index(op.f('ix_teams_pot_tracker_id'), table_name='teams_pot_tracker')
    op.alter_column('teams_pot_tracker', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Identifer',
               existing_nullable=True)
    op.alter_column('teams_pot_tracker', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identifier',
               existing_nullable=True)
    op.alter_column('teams_pot_tracker', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('teams_pot_tracker', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('teams_pot_tracker', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_index(op.f('ix_teams_id'), table_name='teams')
    op.create_unique_constraint(op.f('teams_id_key'), 'teams', ['id'], postgresql_nulls_not_distinct=False)
    op.alter_column('teams', 'leaderboard_tier',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('teams', 'logo_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('teams', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('teams', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'team_rosters', type_='foreignkey')
    op.drop_constraint(None, 'team_rosters', type_='foreignkey')
    op.drop_constraint(None, 'team_rosters', type_='foreignkey')
    op.drop_constraint(None, 'team_rosters', type_='foreignkey')
    op.create_foreign_key(op.f('team_rosters_tournament_id_fkey'), 'team_rosters', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('team_rosters_league_id_fkey'), 'team_rosters', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('team_rosters_team_id_fkey'), 'team_rosters', 'teams', ['team_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('team_rosters_player_id_fkey'), 'team_rosters', 'players', ['player_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_team_rosters_id'), table_name='team_rosters')
    op.create_index(op.f('idx_team_rosters_team_id'), 'team_rosters', ['team_id'], unique=False)
    op.create_index(op.f('idx_team_rosters_player_id'), 'team_rosters', ['player_id'], unique=False)
    op.alter_column('team_rosters', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Identification',
               existing_nullable=True)
    op.alter_column('team_rosters', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identification',
               existing_nullable=True)
    op.alter_column('team_rosters', 'player_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('team_rosters', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('team_rosters', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'team_match_stats', type_='foreignkey')
    op.drop_constraint(None, 'team_match_stats', type_='foreignkey')
    op.create_foreign_key(op.f('team_match_stats_team_id_fkey'), 'team_match_stats', 'teams', ['team_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('team_match_stats_match_id_fkey'), 'team_match_stats', 'matches', ['match_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_team_match_stats_id'), table_name='team_match_stats')
    op.create_unique_constraint(op.f('team_match_stats_match_id_team_id_key'), 'team_match_stats', ['match_id', 'team_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('team_match_stats', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('team_match_stats', 'match_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('team_match_stats', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'rp_transactions', type_='foreignkey')
    op.drop_constraint(None, 'rp_transactions', type_='foreignkey')
    op.drop_constraint(None, 'rp_transactions', type_='foreignkey')
    op.create_foreign_key(op.f('rp_transactions_tournament_id_fkey'), 'rp_transactions', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('rp_transactions_league_id_fkey'), 'rp_transactions', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('rp_transactions_team_id_fkey'), 'rp_transactions', 'teams', ['team_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_rp_transactions_id'), table_name='rp_transactions')
    op.alter_column('rp_transactions', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Identifier',
               existing_nullable=True)
    op.alter_column('rp_transactions', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identifier',
               existing_nullable=True)
    op.alter_column('rp_transactions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('rp_transactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('rp_transactions', 'type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('rp_transactions', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('rp_transactions', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('rp_transactions', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'ranking_points', type_='foreignkey')
    op.drop_constraint(None, 'ranking_points', type_='foreignkey')
    op.create_foreign_key(op.f('ranking_points_tournament_id_fkey'), 'ranking_points', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('ranking_points_league_id_fkey'), 'ranking_points', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_ranking_points_id'), table_name='ranking_points')
    op.create_index(op.f('idx_rp_expire'), 'ranking_points', ['expires_at'], unique=False)
    op.alter_column('ranking_points', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Identifier',
               existing_nullable=True)
    op.alter_column('ranking_points', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identifier',
               existing_nullable=True)
    op.alter_column('ranking_points', 'expires_at',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True)
    op.alter_column('ranking_points', 'awarded_at',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_DATE'))
    op.alter_column('ranking_points', 'source',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('ranking_points', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('ranking_points', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'players', type_='foreignkey')
    op.create_foreign_key(op.f('players_current_team_id_fkey'), 'players', 'teams', ['current_team_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index(op.f('ix_players_id'), table_name='players')
    op.create_index(op.f('idx_players_position'), 'players', ['position'], unique=False)
    op.create_index(op.f('idx_players_current_team_id'), 'players', ['current_team_id'], unique=False)
    op.alter_column('players', 'alternate_gamertag',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               comment='Old or Alternate Gamertag',
               existing_nullable=True)
    op.alter_column('players', 'twitter_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               comment='Twitter Handle',
               existing_nullable=True)
    op.alter_column('players', 'discord_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               comment='Discord Handle',
               existing_nullable=True)
    op.alter_column('players', 'current_team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('players', 'gamertag',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('players', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.create_foreign_key(op.f('player_stats_player_name_fkey'), 'player_stats', 'players', ['player_name'], ['gamertag'], onupdate='CASCADE')
    op.drop_index(op.f('ix_player_stats_id'), table_name='player_stats')
    op.create_unique_constraint(op.f('player_stats_id_key'), 'player_stats', ['id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_stats_team'), 'player_stats', ['team_id'], unique=False)
    op.create_index(op.f('idx_stats_player'), 'player_stats', ['player_id'], unique=False)
    op.create_index(op.f('idx_player_stats_team_id'), 'player_stats', ['team_id'], unique=False)
    op.create_index(op.f('idx_player_stats_player_name'), 'player_stats', ['player_name'], unique=False)
    op.create_index(op.f('idx_player_stats_player_id'), 'player_stats', ['player_id'], unique=False)
    op.create_index(op.f('idx_player_stats_match_id'), 'player_stats', ['match_id'], unique=False)
    op.alter_column('player_stats', 'player_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('player_stats', 'fga',
               existing_type=sa.INTEGER(),
               comment='Field Goals Attempted',
               existing_nullable=True)
    op.alter_column('player_stats', 'fgm',
               existing_type=sa.INTEGER(),
               comment='Field Goals Made',
               existing_nullable=True,
               existing_server_default=sa.text("'0'::smallint"))
    op.alter_column('player_stats', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('player_stats', 'match_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('player_stats', 'player_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('player_stats', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'player_rp_transactions', type_='foreignkey')
    op.drop_constraint(None, 'player_rp_transactions', type_='foreignkey')
    op.create_foreign_key(op.f('player_rp_transactions_tournament_id_fkey'), 'player_rp_transactions', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('player_rp_transactions_league_id_fkey'), 'player_rp_transactions', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_player_rp_transactions_id'), table_name='player_rp_transactions')
    op.create_index(op.f('player_rp_transactions_player_id_idx'), 'player_rp_transactions', ['player_id'], unique=False)
    op.create_index(op.f('player_rp_transactions_match_id_idx'), 'player_rp_transactions', ['match_id'], unique=False)
    op.alter_column('player_rp_transactions', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Identifier',
               existing_nullable=True)
    op.alter_column('player_rp_transactions', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identifier',
               existing_nullable=True)
    op.alter_column('player_rp_transactions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('player_rp_transactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('player_rp_transactions', 'type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('player_rp_transactions', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('player_rp_transactions', 'match_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('player_rp_transactions', 'player_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('player_rp_transactions', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'player_badges', type_='foreignkey')
    op.drop_constraint(None, 'player_badges', type_='foreignkey')
    op.create_foreign_key(op.f('player_badges_league_id_fkey'), 'player_badges', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('player_badges_tournament_id_fkey'), 'player_badges', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_player_badges_id'), table_name='player_badges')
    op.create_index(op.f('player_badges_player_wallet_idx'), 'player_badges', ['player_wallet'], unique=False)
    op.alter_column('player_badges', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Identifier',
               existing_nullable=True)
    op.alter_column('player_badges', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identifier',
               existing_nullable=True)
    op.alter_column('player_badges', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('player_badges', 'ipfs_uri',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('player_badges', 'tx_hash',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('player_badges', 'badge_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('player_badges', 'player_wallet',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('player_badges', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'past_champions', type_='foreignkey')
    op.drop_constraint(None, 'past_champions', type_='foreignkey')
    op.create_foreign_key(op.f('past_champions_tournament_id_fkey'), 'past_champions', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('past_champions_league_id_fkey'), 'past_champions', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('past_champions_champion_logo_fkey'), 'past_champions', 'teams', ['champion_logo'], ['logo_url'])
    op.create_foreign_key(op.f('past_champions_lg_logo_fkey'), 'past_champions', 'leagues_info', ['lg_logo'], ['lg_logo_url'], onupdate='CASCADE')
    op.create_foreign_key(op.f('past_champions_team_name_fkey'), 'past_champions', 'teams', ['team_name'], ['name'])
    op.drop_index(op.f('ix_past_champions_id'), table_name='past_champions')
    op.create_index(op.f('past_champions_team_year_idx'), 'past_champions', ['team_id', 'year', 'season'], unique=False)
    op.create_index(op.f('past_champions_league_idx'), 'past_champions', ['league_name'], unique=False)
    op.alter_column('past_champions', 'tournament_date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True)
    op.alter_column('past_champions', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('past_champions', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('past_champions', 'is_tournament',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('past_champions', 'lg_logo',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               comment='League Logo URL',
               existing_nullable=True)
    op.alter_column('past_champions', 'champion_logo',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               comment='Champion Logo URL',
               existing_nullable=True)
    op.alter_column('past_champions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('past_champions', 'team_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('past_champions', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('past_champions', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'matches', type_='foreignkey')
    op.drop_constraint(None, 'matches', type_='foreignkey')
    op.drop_constraint(None, 'matches', type_='foreignkey')
    op.create_foreign_key(op.f('matches_league_id_fkey'), 'matches', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('matches_tournament_id_fkey'), 'matches', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('matches_team_a_name_fkey'), 'matches', 'teams', ['team_a_name'], ['name'], onupdate='CASCADE')
    op.create_foreign_key(op.f('matches_league_season_fkey'), 'matches', 'league_seasons', ['league_season'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_matches_id'), table_name='matches')
    op.create_unique_constraint(op.f('matches_id_key'), 'matches', ['id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_matches_winner_id'), 'matches', ['winner_id'], unique=False)
    op.create_index(op.f('idx_matches_team_b_id'), 'matches', ['team_b_id'], unique=False)
    op.create_index(op.f('idx_matches_team_a_name'), 'matches', ['team_a_name'], unique=False)
    op.create_index(op.f('idx_matches_team_a_id'), 'matches', ['team_a_id'], unique=False)
    op.alter_column('matches', 'league_season',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Season',
               existing_nullable=True)
    op.alter_column('matches', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Identifier',
               existing_nullable=True)
    op.alter_column('matches', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identifier',
               existing_nullable=True)
    op.alter_column('matches', 'game_number',
               existing_type=sa.Integer(),
               type_=sa.SMALLINT(),
               existing_nullable=True)
    op.alter_column('matches', 'team_a_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('matches', 'boxscore_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               comment='boxscore from Storage Bucket',
               existing_nullable=True)
    op.alter_column('matches', 'winner_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('matches', 'team_b_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('matches', 'team_a_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('matches', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_column('matches', 'winner_name')
    op.drop_column('matches', 'team_b_name')
    op.create_table_comment(
        'match_submissions',
        'match results for review',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'match_submissions', type_='foreignkey')
    op.drop_constraint(None, 'match_submissions', type_='foreignkey')
    op.drop_constraint(None, 'match_submissions', type_='foreignkey')
    op.create_foreign_key(op.f('match_submissions_team_a_name_fkey'), 'match_submissions', 'teams', ['team_a_name'], ['name'])
    op.create_foreign_key(op.f('match_submissions_tournament_id_fkey'), 'match_submissions', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('match_submissions_match_id_fkey'), 'match_submissions', 'matches', ['match_id'], ['id'], onupdate='CASCADE')
    op.create_foreign_key(op.f('match_submissions_team_b_name_fkey'), 'match_submissions', 'teams', ['team_b_name'], ['name'])
    op.create_foreign_key(op.f('match_submissions_league_id_fkey'), 'match_submissions', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_match_submissions_id'), table_name='match_submissions')
    op.alter_column('match_submissions', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Identifier',
               existing_nullable=True)
    op.alter_column('match_submissions', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'payload',
               existing_type=sa.Text(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('match_submissions', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('match_submissions', 'reviewed_by',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'review_status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'team_b_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'team_b_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'team_a_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'team_a_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'match_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('match_submissions', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_index(op.f('ix_match_points_id'), table_name='match_points')
    op.create_index(op.f('idx_match_points_team_id'), 'match_points', ['team_id'], unique=False)
    op.create_index(op.f('idx_match_points_match_id'), 'match_points', ['match_id'], unique=False)
    op.create_index(op.f('idx_match_points_group_id'), 'match_points', ['group_id'], unique=False)
    op.alter_column('match_points', 'point_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('match_points', 'group_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('match_points', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('match_points', 'match_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('match_points', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'match_mvp', type_='foreignkey')
    op.create_foreign_key(op.f('match_mvp_match_id_fkey'), 'match_mvp', 'matches', ['match_id'], ['id'], ondelete='CASCADE')
    op.alter_column('match_mvp', 'player_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('match_mvp', 'match_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.create_table_comment(
        'leagues_info',
        'League Information',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('leagues_info_sponsor_info_fkey'), 'leagues_info', 'sponsor_info', ['sponsor_info'], ['sponsor_name'], onupdate='CASCADE')
    op.drop_index(op.f('ix_leagues_info_id'), table_name='leagues_info')
    op.create_unique_constraint(op.f('leagues_info_twitter_id_key'), 'leagues_info', ['twitter_id'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('leagues_info_lg_logo_url_key'), 'leagues_info', ['lg_logo_url'], postgresql_nulls_not_distinct=False)
    op.alter_column('leagues_info', 'twitch_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               comment='Twitch',
               existing_nullable=True)
    op.alter_column('leagues_info', 'twitter_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('leagues_info', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('leagues_info', 'lg_discord',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('leagues_info', 'lg_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('leagues_info', 'lg_logo_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('leagues_info', 'league',
               existing_type=postgresql.ENUM('Unified Pro Am Association', 'UPA College', 'WR', 'MPBA', 'Rising Stars', 'Staten Island Basketball Association', 'Hall Of Fame League', 'Dunk League', 'Road to 25K', name='leagues'),
               nullable=True)
    op.alter_column('leagues_info', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.create_table_comment(
        'league_seasons',
        'Tracks sports league seasons',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'league_seasons', type_='foreignkey')
    op.create_foreign_key(op.f('league_seasons_league_id_fkey'), 'league_seasons', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('league_seasons_league_name_fkey'), 'league_seasons', 'leagues_info', ['league_name'], ['league'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_league_seasons_id'), table_name='league_seasons')
    op.create_unique_constraint(op.f('unique_league_season'), 'league_seasons', ['league_name', 'season_number'], postgresql_nulls_not_distinct=False)
    op.alter_column('league_seasons', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identifier',
               existing_nullable=True)
    op.alter_column('league_seasons', 'year',
               existing_type=postgresql.ENUM('2K16', '2K17', '2K18', '2K19', '2K20', '2K21', '2K22', '2K23', '2K24', '2K25', '2K26', name='game_year'),
               comment='game year',
               existing_nullable=True)
    op.alter_column('league_seasons', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('league_seasons', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('league_seasons', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_index(op.f('ix_group_standings_id'), table_name='group_standings')
    op.create_index(op.f('idx_group_standings_team_id'), 'group_standings', ['team_id'], unique=False)
    op.create_index(op.f('idx_group_standings_group_id'), 'group_standings', ['group_id'], unique=False)
    op.create_unique_constraint(op.f('group_standings_group_id_team_id_key'), 'group_standings', ['group_id', 'team_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('group_standings', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('group_standings', 'group_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('group_standings', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_index(op.f('ix_group_matches_id'), table_name='group_matches')
    op.create_index(op.f('idx_group_matches_match_id'), 'group_matches', ['match_id'], unique=False)
    op.create_index(op.f('idx_group_matches_group_id'), 'group_matches', ['group_id'], unique=False)
    op.create_unique_constraint(op.f('group_matches_group_id_match_id_key'), 'group_matches', ['group_id', 'match_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('group_matches', 'match_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('group_matches', 'group_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('group_matches', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'event_results', type_='foreignkey')
    op.drop_constraint(None, 'event_results', type_='foreignkey')
    op.create_foreign_key(op.f('event_results_league_id_fkey'), 'event_results', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('event_results_tournament_id_fkey'), 'event_results', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_event_results_id'), table_name='event_results')
    op.create_index(op.f('event_results_team_placement_idx'), 'event_results', ['team_id', 'placement', sa.literal_column('awarded_at DESC')], unique=False)
    op.create_unique_constraint(op.f('event_results_id_key'), 'event_results', ['id'], postgresql_nulls_not_distinct=False)
    op.alter_column('event_results', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Identifier',
               existing_nullable=True)
    op.alter_column('event_results', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identifier',
               existing_nullable=True)
    op.alter_column('event_results', 'winner_banner_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('event_results', 'prize_amount',
               existing_type=sa.INTEGER(),
               comment='Cash Prize Amount',
               existing_nullable=True)
    op.alter_column('event_results', 'awarded_at',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_DATE'))
    op.alter_column('event_results', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('event_results', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'tournament_groupss', type_='foreignkey')
    op.drop_constraint(None, 'tournament_groupss', type_='foreignkey')
    op.create_foreign_key(op.f('tournament_groupss_tournament_id_fkey'), 'tournament_groupss', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('tournament_groupss_league_season_id_fkey'), 'tournament_groupss', 'league_seasons', ['league_season_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index(op.f('ix_tournament_groupss_id'), table_name='tournament_groupss')
    op.alter_column('tournament_groupss', 'league_season_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('tournament_groupss', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('tournament_groupss', 'sort_order',
               existing_type=sa.INTEGER(),
               comment='Order in which groups are displayed',
               existing_nullable=True)
    op.alter_column('tournament_groupss', 'advancement_count',
               existing_type=sa.INTEGER(),
               comment='Number of teams that advance from this group',
               existing_nullable=True,
               existing_server_default=sa.text('2'))
    op.alter_column('tournament_groupss', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'active'::text"))
    op.alter_column('tournament_groupss', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('tournament_groupss', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_index(op.f('ix_tournament_groups_members_id'), table_name='tournament_groups_members')
    op.create_index(op.f('idx_tournament_groups_members_team_id'), 'tournament_groups_members', ['team_id'], unique=False)
    op.create_index(op.f('idx_tournament_groups_members_group_id'), 'tournament_groups_members', ['group_id'], unique=False)
    op.create_unique_constraint(op.f('tournament_groups_members_group_id_team_id_key'), 'tournament_groups_members', ['group_id', 'team_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('tournament_groups_members', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('tournament_groups_members', 'group_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('tournament_groups_members', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_constraint(None, 'draft_pool', type_='foreignkey')
    op.drop_constraint(None, 'draft_pool', type_='foreignkey')
    op.drop_constraint(None, 'draft_pool', type_='foreignkey')
    op.create_foreign_key(op.f('draft_pool_league_id_fkey'), 'draft_pool', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('draft_pool_season_fkey'), 'draft_pool', 'league_seasons', ['season'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('draft_pool_player_id_fkey'), 'draft_pool', 'players', ['player_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('draft_pool_tournament_id_fkey'), 'draft_pool', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.alter_column('draft_pool', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournaments Identifier',
               existing_nullable=True)
    op.alter_column('draft_pool', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identifier',
               existing_nullable=True)
    op.alter_column('draft_pool', 'season',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('draft_pool', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'available'::text"))
    op.alter_column('draft_pool', 'player_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_constraint(None, 'awards_race', type_='foreignkey')
    op.drop_constraint(None, 'awards_race', type_='foreignkey')
    op.drop_constraint(None, 'awards_race', type_='foreignkey')
    op.create_foreign_key(op.f('awards_race_league_id_fkey'), 'awards_race', 'leagues_info', ['league_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('awards_race_tournament_id_fkey'), 'awards_race', 'tournaments', ['tournament_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(op.f('awards_race_player_id_fkey'), 'awards_race', 'players', ['player_id'], ['id'], onupdate='CASCADE')
    op.drop_index(op.f('ix_awards_race_id'), table_name='awards_race')
    op.alter_column('awards_race', 'tournament_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='Tournament Identifier',
               existing_nullable=True)
    op.alter_column('awards_race', 'league_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               comment='League Identifier',
               existing_nullable=True)
    op.alter_column('awards_race', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('awards_race', 'rank',
               existing_type=sa.Integer(),
               type_=sa.SMALLINT(),
               existing_nullable=True)
    op.alter_column('awards_race', 'player_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('awards_race', 'team_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('awards_race', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), server_default=sa.text("'info'::text"), autoincrement=False, nullable=False),
    sa.Column('read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name=op.f('notifications_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    op.create_index(op.f('notifications_user_id_idx'), 'notifications', ['user_id'], unique=False)
    op.create_index(op.f('notifications_created_at_idx'), 'notifications', ['created_at'], unique=False)
    op.create_table('role_permissions',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('permission', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('admin', 'league_staff', 'user', 'editor', 'analyst', 'team_staff', 'player', name='app_role'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('role_permissions_pkey'))
    )
    op.create_table('salary_tiers',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('salary_tier', postgresql.ENUM('S', 'A', 'B', 'C', 'D', name='salary_tier'), autoincrement=False, nullable=False),
    sa.Column('label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('multiplier', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.Column('min_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('salary_tiers_pkey')),
    sa.UniqueConstraint('salary_tier', name=op.f('salary_tiers_salary_tier_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('user_roles',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('admin', 'league_staff', 'user', 'editor', 'analyst', 'team_staff', 'player', name='app_role'), autoincrement=False, nullable=True),
    sa.Column('role_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name=op.f('user_roles_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_roles_pkey')),
    sa.UniqueConstraint('user_id', 'role', name=op.f('user_roles_user_id_role_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Application roles for each user.'
    )
    op.create_index(op.f('idx_user_roles_user_id'), 'user_roles', ['user_id'], unique=False)
    op.create_table('player_salary_tiers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tier_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('min_value', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('max_value', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('multiplier', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('player_salary_tiers_pkey'))
    )
    op.create_table('update_race',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('race_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('update_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('update_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('previous_rank', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('new_rank', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("update_type = ANY (ARRAY['rank_change'::text, 'winner_selection'::text, 'nomination'::text, 'removal'::text, 'other'::text])", name=op.f('update_race_update_type_check')),
    sa.ForeignKeyConstraint(['race_id'], ['awards_race.id'], name=op.f('update_race_race_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('update_race_pkey'))
    )
    op.create_index(op.f('idx_update_race_race_id'), 'update_race', ['race_id'], unique=False)
    op.create_table('profiles',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('role', sa.TEXT(), server_default=sa.text("'user'::text"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('app_role', postgresql.ENUM('admin', 'league_staff', 'user', 'editor', 'analyst', 'team_staff', 'player', name='app_role'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id'], ['auth.users.id'], name=op.f('profiles_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('profiles_pkey'))
    )
    op.create_table('regions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('regions_pkey')),
    sa.UniqueConstraint('name', name=op.f('regions_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('kv_store_10f5458b',
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('key', name=op.f('kv_store_10f5458b_pkey'))
    )
    op.create_table('sponsor_info',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('sponsor_logo', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sponsor_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sponsor_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('sponsor_info_pkey')),
    sa.UniqueConstraint('sponsor_logo', name=op.f('sponsor_info_sponsor_logo_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('sponsor_name', name=op.f('sponsor_info_sponsor_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('sponsor_url', name=op.f('sponsor_info_sponsor_url_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_discord_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_badges_id'), table_name='badges')
    op.drop_table('badges')
    # ### end Alembic commands ### 